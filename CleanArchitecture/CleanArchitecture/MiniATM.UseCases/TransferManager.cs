using MiniATM.Entities;using MiniATM.UseCases.UnitOfWork;namespace MiniATM.UseCases;public class TransferManager(ITransactionUnitOfWork transactionUnitOfWork) : ITransferManager{    public ITransactionUnitOfWork TransactionUnitOfWork = transactionUnitOfWork ?? throw new ArgumentNullException(nameof(transactionUnitOfWork));    public async Task<TransactionResult> TransferAsync(string fromAccountId, string toAccountId, double amount)    {        try        {            await TransactionUnitOfWork.BeginTransactionAsync();                        var fromAccount = await TransactionUnitOfWork.BankAccountRepository.FindByIdAsync(fromAccountId);            if (fromAccount == null || fromAccount.IsLocked)            {                return TransactionResult.SourceNotFound;            }            var balanceleft = fromAccount.Balance - amount;            if (balanceleft < fromAccount.MinimumRequiredAmount)            {                return TransactionResult.BalanceTooLow;            }            var toAccount = await TransactionUnitOfWork.BankAccountRepository.FindByIdAsync(toAccountId);            if (toAccount == null || toAccount.IsLocked)            {                return TransactionResult.SourceNotFound;            }            fromAccount.Balance -= amount;            await TransactionUnitOfWork.BankAccountRepository.UpdateAsync(fromAccount);                        var now = DateTime.UtcNow;            await TransactionUnitOfWork.TransactionRepository.Add(new Transaction()            {                Id = Guid.NewGuid(),                Amount = amount,                AccountId = fromAccount.Id,                DateTimeUTC = now,                TransactionTypes = TransactionTypes.Withdrawal,                Notes = $"Transfer to {toAccount.Id}"            });                        toAccount.Balance += amount;            await TransactionUnitOfWork.BankAccountRepository.UpdateAsync(toAccount);            await TransactionUnitOfWork.TransactionRepository.Add(new Transaction()            {                Id = Guid.NewGuid(),                Amount = amount,                AccountId = toAccount.Id,                DateTimeUTC = now,                TransactionTypes = TransactionTypes.Withdrawal,                Notes = $"Transfer from {fromAccount.Id}"            });            await TransactionUnitOfWork.SaveChangesAsync();            return TransactionResult.Success;        }        catch (Exception e)        {            return new TransactionResult(TransactionResultCodes.Error, e.Message);        }    }}